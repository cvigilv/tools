#!/bin/bash
#
# =============================================
# panoPost (version 0.0)
# by Carlos Vigil Vásquez
#
# Create panoramic post for Instagram
#
# https://github.com/cvigilv/
# =============================================

# SCRIPT HISTORY
_version_="0.0"
_released_="Currently in development"
_title_="panoPost - Panoramic post creator $_version_"

# ARGUMENT PARSING
 helper()
{
echo
"Usage: panoPost [arguments]

Arguments:
    -h or --help        Print Help (this message) and exit
    --version           Print version information and exit";
exit 1;
}

ver()
{
echo
"Version:        $_version_
Release:        $_released_";
exit 1;
}

echo "$_title_"
echo

# Default arguments
DIR=$PWD
FACTOR="1/1" # 1/1 for square, 3/2 for landscape, 4/5 for portrait

# Argument parser
while getopts :-: arguments;do
    case $arguments in
    -)  # Parse long arguments
        case "${OPTARG}" in
            help)       helper;;
            version)    ver;;
            *)          echo -e "Unknown option argument: \"-${OPTARG}\"\nMore info with: \"$0 --help\"";;
        esac;;
    *)  # Unknown argument
        echo -e "Unknown option argument: \"-${OPTARG}\"\nMore info with:\t\"$0 --help\"";;
    esac
done

# Analyse ever image of composition to get dimensions
N_PICS=0
echo "· Getting dimensions of picture for resizing"

for file in $(ls $DIR); do
    [ -f $file ] && N_PICS=$(($N_PICS + 1)) || continue

    # Retrieve information from file
    W=$(identify -ping -format '%w' $file)
    H=$(identify -ping -format '%h' $file)

    # Check existence of MinH variable and update if the height of picture is lower than that value
    [ -z $MinH ] && MinH=$H
    [ $H -le $MinH ] && MinH=$H
done

# Set a couple of variables based in the previous analysis
Canvas_H=$MinH
Slice_H=$MinH
Slice_W=$(echo "$MinH * $FACTOR" | bc -l | awk '{print int($1)}')
unset MinH

echo "Number of picture:        $N_PICS"
echo "Slice Height:             $Slice_H"
echo "Slice Width:              $Slice_W"

echo

# Create temporal resized files used in composition
echo "· Creating temporal resized files"
for file in $(ls $DIR); do
    [ -f $file ] || continue

    # Resize all images to the one with smallest height
    convert $file -geometry x$Slice_H resized_$file

    # Get width of resized picture
    Resized_W=$(identify -ping -format '%w' resized_$file)

    # Add up widths to get canvas size
    [ -z $Canvas_W ] && Canvas_W=$Resized_W || Canvas_W=$(($Canvas_W + $Resized_W))
done

# Create blank canvas for final product
echo "· Creating blank canvas"
Canvas_W=$(($Slice_H*$(echo "$Canvas_W/$Slice_H" | bc -l | awk '{print int($1+1.0)}')))
echo "Blank canvas size: ${Canvas_W}x${Canvas_H}"
echo "Canvas color: White"
convert -size ${Canvas_W}x${Canvas_H} xc:white composite.jpg

# Create panoramic picture
echo "· Creating composite of images"
xShift=0
for file in $(ls $DIR/resized_* | shuf); do
    [ -f $file ] || continue

    # Composite image with canvas
    convert composite.jpg $file -gravity southwest -geometry +$xShift+0 -composite composite.jpg

    # Get width of image to shift the composite with the next image
    xShift=$(($xShift+$(identify -ping -format '%w' $file)))
done

# Create slices of panoramic image
xShift=0
Iterations=$(($Canvas_W/$Slice_W))
[ $Iterations -gt 9 ] && exit "Too many images to create post!" 1

echo "· Creating slices for post!"
echo "Number of slices: $Iterations"

for i in $(seq 1 $Iterations); do
    convert composite.jpg -gravity southwest -crop ${Slice_W}x${Slice_H}+$xShift+0 Slice_$i.jpg
    xShift=$(($xShift+$Slice_W))
done

rm resized_*
